/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/athletes/{id}/stats": {
    /**
     * Get Athlete Stats 
     * @description Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
     */
    get: operations["getStats"];
  };
  "/athlete": {
    /**
     * Get Authenticated Athlete 
     * @description Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     */
    get: operations["getLoggedInAthlete"];
    /**
     * Update Athlete 
     * @description Update the currently authenticated athlete. Requires profile:write scope.
     */
    put: operations["updateLoggedInAthlete"];
  };
  "/athlete/zones": {
    /**
     * Get Zones 
     * @description Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.
     */
    get: operations["getLoggedInAthleteZones"];
  };
  "/segments/{id}": {
    /**
     * Get Segment 
     * @description Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
     */
    get: operations["getSegmentById"];
  };
  "/segments/starred": {
    /**
     * List Starred Segments 
     * @description List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
     */
    get: operations["getLoggedInAthleteStarredSegments"];
  };
  "/segments/{id}/starred": {
    /**
     * Star Segment 
     * @description Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
     */
    put: operations["starSegment"];
  };
  "/segment_efforts": {
    /**
     * List Segment Efforts 
     * @description Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.
     */
    get: operations["getEffortsBySegmentId"];
  };
  "/segments/explore": {
    /**
     * Explore segments 
     * @description Returns the top 10 segments matching a specified query.
     */
    get: operations["exploreSegments"];
  };
  "/segment_efforts/{id}": {
    /**
     * Get Segment Effort 
     * @description Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
     */
    get: operations["getSegmentEffortById"];
  };
  "/activities": {
    /**
     * Create an Activity 
     * @description Creates a manual activity for an athlete, requires activity:write scope.
     */
    post: operations["createActivity"];
  };
  "/activities/{id}": {
    /**
     * Get Activity 
     * @description Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    get: operations["getActivityById"];
    /**
     * Update Activity 
     * @description Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     */
    put: operations["updateActivityById"];
  };
  "/athlete/activities": {
    /**
     * List Athlete Activities 
     * @description Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     */
    get: operations["getLoggedInAthleteActivities"];
  };
  "/activities/{id}/laps": {
    /**
     * List Activity Laps 
     * @description Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    get: operations["getLapsByActivityId"];
  };
  "/activities/{id}/zones": {
    /**
     * Get Activity Zones 
     * @description Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    get: operations["getZonesByActivityId"];
  };
  "/activities/{id}/comments": {
    /**
     * List Activity Comments 
     * @description Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    get: operations["getCommentsByActivityId"];
  };
  "/activities/{id}/kudos": {
    /**
     * List Activity Kudoers 
     * @description Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    get: operations["getKudoersByActivityId"];
  };
  "/clubs/{id}": {
    /**
     * Get Club 
     * @description Returns a given club using its identifier.
     */
    get: operations["getClubById"];
  };
  "/clubs/{id}/members": {
    /**
     * List Club Members 
     * @description Returns a list of the athletes who are members of a given club.
     */
    get: operations["getClubMembersById"];
  };
  "/clubs/{id}/admins": {
    /**
     * List Club Administrators 
     * @description Returns a list of the administrators of a given club.
     */
    get: operations["getClubAdminsById"];
  };
  "/clubs/{id}/activities": {
    /**
     * List Club Activities 
     * @description Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
     */
    get: operations["getClubActivitiesById"];
  };
  "/athlete/clubs": {
    /**
     * List Athlete Clubs 
     * @description Returns a list of the clubs whose membership includes the authenticated athlete.
     */
    get: operations["getLoggedInAthleteClubs"];
  };
  "/gear/{id}": {
    /**
     * Get Equipment 
     * @description Returns an equipment using its identifier.
     */
    get: operations["getGearById"];
  };
  "/routes/{id}": {
    /**
     * Get Route 
     * @description Returns a route using its identifier. Requires read_all scope for private routes.
     */
    get: operations["getRouteById"];
  };
  "/athletes/{id}/routes": {
    /**
     * List Athlete Routes 
     * @description Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
     */
    get: operations["getRoutesByAthleteId"];
  };
  "/routes/{id}/export_gpx": {
    /**
     * Export Route GPX 
     * @description Returns a GPX file of the route. Requires read_all scope for private routes.
     */
    get: operations["getRouteAsGPX"];
  };
  "/routes/{id}/export_tcx": {
    /**
     * Export Route TCX 
     * @description Returns a TCX file of the route. Requires read_all scope for private routes.
     */
    get: operations["getRouteAsTCX"];
  };
  "/uploads": {
    /**
     * Upload Activity 
     * @description Uploads a new data file to create an activity from. Requires activity:write scope.
     */
    post: operations["createUpload"];
  };
  "/uploads/{uploadId}": {
    /**
     * Get Upload 
     * @description Returns an upload for a given identifier. Requires activity:write scope.
     */
    get: operations["getUploadById"];
  };
  "/activities/{id}/streams": {
    /**
     * Get Activity Streams 
     * @description Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     */
    get: operations["getActivityStreams"];
  };
  "/segment_efforts/{id}/streams": {
    /**
     * Get Segment Effort Streams 
     * @description Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     */
    get: operations["getSegmentEffortStreams"];
  };
  "/segments/{id}/streams": {
    /**
     * Get Segment Streams 
     * @description Returns the given segment's streams. Requires read_all scope for private segments.
     */
    get: operations["getSegmentStreams"];
  };
  "/routes/{id}/streams": {
    /**
     * Get Route Streams 
     * @description Returns the given route's streams. Requires read_all scope for private routes.
     */
    get: operations["getRouteStreams"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description A set of rolled-up statistics and totals for an athlete */
    ActivityStats: {
      /**
       * Format: double 
       * @description The longest distance ridden by the athlete.
       */
      biggest_ride_distance?: number;
      /**
       * Format: double 
       * @description The highest climb ridden by the athlete.
       */
      biggest_climb_elevation_gain?: number;
      recent_ride_totals?: components["schemas"]["ActivityTotal"];
      recent_run_totals?: components["schemas"]["ActivityTotal"];
      recent_swim_totals?: components["schemas"]["ActivityTotal"];
      ytd_ride_totals?: components["schemas"]["ActivityTotal"];
      ytd_run_totals?: components["schemas"]["ActivityTotal"];
      ytd_swim_totals?: components["schemas"]["ActivityTotal"];
      all_ride_totals?: components["schemas"]["ActivityTotal"];
      all_run_totals?: components["schemas"]["ActivityTotal"];
      all_swim_totals?: components["schemas"]["ActivityTotal"];
    };
    /** @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters. */
    ActivityTotal: {
      /** @description The number of activities considered in this total. */
      count?: number;
      /**
       * Format: float 
       * @description The total distance covered by the considered activities.
       */
      distance?: number;
      /** @description The total moving time of the considered activities. */
      moving_time?: number;
      /** @description The total elapsed time of the considered activities. */
      elapsed_time?: number;
      /**
       * Format: float 
       * @description The total elevation gain of the considered activities.
       */
      elevation_gain?: number;
      /** @description The total number of achievements of the considered activities. */
      achievement_count?: number;
    };
    /** @description Encapsulates the errors that may be returned from the API. */
    Fault: {
      /** @description The set of specific errors associated with this fault, if any. */
      errors?: (components["schemas"]["Error"])[];
      /** @description The message of the fault. */
      message?: string;
    };
    Error: {
      /** @description The code associated with this error. */
      code?: string;
      /** @description The specific field or aspect of the resource associated with this error. */
      field?: string;
      /** @description The type of resource associated with this error. */
      resource?: string;
    };
    DetailedAthlete: components["schemas"]["SummaryAthlete"] & ({
      /** @description The athlete's follower count. */
      follower_count?: number;
      /** @description The athlete's friend count. */
      friend_count?: number;
      /**
       * @description The athlete's preferred unit system. 
       * @enum {string}
       */
      measurement_preference?: "feet" | "meters";
      /** @description The athlete's FTP (Functional Threshold Power). */
      ftp?: number;
      /**
       * Format: float 
       * @description The athlete's weight.
       */
      weight?: number;
      /** @description The athlete's clubs. */
      clubs?: (components["schemas"]["SummaryClub"])[];
      /** @description The athlete's bikes. */
      bikes?: (components["schemas"]["SummaryGear"])[];
      /** @description The athlete's shoes. */
      shoes?: (components["schemas"]["SummaryGear"])[];
    });
    SummaryAthlete: components["schemas"]["MetaAthlete"] & ({
      /** @description Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail" */
      resource_state?: number;
      /** @description The athlete's first name. */
      firstname?: string;
      /** @description The athlete's last name. */
      lastname?: string;
      /** @description URL to a 62x62 pixel profile picture. */
      profile_medium?: string;
      /** @description URL to a 124x124 pixel profile picture. */
      profile?: string;
      /** @description The athlete's city. */
      city?: string;
      /** @description The athlete's state or geographical region. */
      state?: string;
      /** @description The athlete's country. */
      country?: string;
      /**
       * @description The athlete's sex. 
       * @enum {string}
       */
      sex?: "M" | "F";
      /** @description Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. */
      premium?: boolean;
      /** @description Whether the athlete has any Summit subscription. */
      summit?: boolean;
      /**
       * Format: date-time 
       * @description The time at which the athlete was created.
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description The time at which the athlete was last updated.
       */
      updated_at?: string;
    });
    MetaAthlete: {
      /**
       * Format: int64 
       * @description The unique identifier of the athlete
       */
      id?: number;
    };
    SummaryClub: components["schemas"]["MetaClub"] & ({
      /** @description URL to a 60x60 pixel profile picture. */
      profile_medium?: string;
      /** @description URL to a ~1185x580 pixel cover photo. */
      cover_photo?: string;
      /** @description URL to a ~360x176  pixel cover photo. */
      cover_photo_small?: string;
      /**
       * @description Deprecated. Prefer to use activity_types. 
       * @enum {string}
       */
      sport_type?: "cycling" | "running" | "triathlon" | "other";
      /** @description The activity types that count for a club. This takes precedence over sport_type. */
      activity_types?: (components["schemas"]["ActivityType"])[];
      /** @description The club's city. */
      city?: string;
      /** @description The club's state or geographical region. */
      state?: string;
      /** @description The club's country. */
      country?: string;
      /** @description Whether the club is private. */
      private?: boolean;
      /** @description The club's member count. */
      member_count?: number;
      /** @description Whether the club is featured or not. */
      featured?: boolean;
      /** @description Whether the club is verified or not. */
      verified?: boolean;
      /** @description The club's vanity URL. */
      url?: string;
    });
    MetaClub: {
      /**
       * Format: int64 
       * @description The club's unique identifier.
       */
      id?: number;
      /** @description Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail" */
      resource_state?: number;
      /** @description The club's name. */
      name?: string;
    };
    /**
     * @description An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide) 
     * @enum {string}
     */
    ActivityType: "AlpineSki" | "BackcountrySki" | "Canoeing" | "Crossfit" | "EBikeRide" | "Elliptical" | "Golf" | "Handcycle" | "Hike" | "IceSkate" | "InlineSkate" | "Kayaking" | "Kitesurf" | "NordicSki" | "Ride" | "RockClimbing" | "RollerSki" | "Rowing" | "Run" | "Sail" | "Skateboard" | "Snowboard" | "Snowshoe" | "Soccer" | "StairStepper" | "StandUpPaddling" | "Surfing" | "Swim" | "Velomobile" | "VirtualRide" | "VirtualRun" | "Walk" | "WeightTraining" | "Wheelchair" | "Windsurf" | "Workout" | "Yoga";
    SummaryGear: {
      /** @description The gear's unique identifier. */
      id?: string;
      /** @description Resource state, indicates level of detail. Possible values: 2 -> "summary", 3 -> "detail" */
      resource_state?: number;
      /** @description Whether this gear's is the owner's default one. */
      primary?: boolean;
      /** @description The gear's name. */
      name?: string;
      /**
       * Format: float 
       * @description The distance logged with this gear.
       */
      distance?: number;
    };
    Zones: {
      heart_rate?: components["schemas"]["HeartRateZoneRanges"];
      power?: components["schemas"]["PowerZoneRanges"];
    };
    HeartRateZoneRanges: {
      /** @description Whether the athlete has set their own custom heart rate zones */
      custom_zones?: boolean;
      zones?: components["schemas"]["ZoneRanges"];
    };
    ZoneRanges: (components["schemas"]["ZoneRange"])[];
    ZoneRange: {
      /** @description The minimum value in the range. */
      min?: number;
      /** @description The maximum value in the range. */
      max?: number;
    };
    PowerZoneRanges: {
      zones?: components["schemas"]["ZoneRanges"];
    };
    DetailedSegment: components["schemas"]["SummarySegment"] & {
      /**
       * Format: date-time 
       * @description The time at which the segment was created.
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description The time at which the segment was last updated.
       */
      updated_at?: string;
      /**
       * Format: float 
       * @description The segment's total elevation gain.
       */
      total_elevation_gain?: number;
      map?: components["schemas"]["PolylineMap"];
      /** @description The total number of efforts for this segment */
      effort_count?: number;
      /** @description The number of unique athletes who have an effort for this segment */
      athlete_count?: number;
      /** @description Whether this segment is considered hazardous */
      hazardous?: boolean;
      /** @description The number of stars for this segment */
      star_count?: number;
    };
    SummarySegment: {
      /**
       * Format: int64 
       * @description The unique identifier of this segment
       */
      id?: number;
      /** @description The name of this segment */
      name?: string;
      /** @enum {string} */
      activity_type?: "Ride" | "Run";
      /**
       * Format: float 
       * @description The segment's distance, in meters
       */
      distance?: number;
      /**
       * Format: float 
       * @description The segment's average grade, in percents
       */
      average_grade?: number;
      /**
       * Format: float 
       * @description The segments's maximum grade, in percents
       */
      maximum_grade?: number;
      /**
       * Format: float 
       * @description The segments's highest elevation, in meters
       */
      elevation_high?: number;
      /**
       * Format: float 
       * @description The segments's lowest elevation, in meters
       */
      elevation_low?: number;
      start_latlng?: components["schemas"]["LatLng"];
      end_latlng?: components["schemas"]["LatLng"];
      /** @description The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. */
      climb_category?: number;
      /** @description The segments's city. */
      city?: string;
      /** @description The segments's state or geographical region. */
      state?: string;
      /** @description The segment's country. */
      country?: string;
      /** @description Whether this segment is private. */
      private?: boolean;
      athlete_pr_effort?: components["schemas"]["SummarySegmentEffort"];
      athlete_segment_stats?: components["schemas"]["SummaryPRSegmentEffort"];
    };
    /** @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    LatLng: (number)[];
    SummarySegmentEffort: {
      /**
       * Format: int64 
       * @description The unique identifier of this effort
       */
      id?: number;
      /**
       * Format: int64 
       * @description The unique identifier of the activity related to this effort
       */
      activity_id?: number;
      /** @description The effort's elapsed time */
      elapsed_time?: number;
      /**
       * Format: date-time 
       * @description The time at which the effort was started.
       */
      start_date?: string;
      /**
       * Format: date-time 
       * @description The time at which the effort was started in the local timezone.
       */
      start_date_local?: string;
      /**
       * Format: float 
       * @description The effort's distance in meters
       */
      distance?: number;
      /** @description Whether this effort is the current best on the leaderboard */
      is_kom?: boolean;
    };
    SummaryPRSegmentEffort: {
      /**
       * Format: int64 
       * @description The unique identifier of the activity related to the PR effort.
       */
      pr_activity_id?: number;
      /** @description The elapsed time ot the PR effort. */
      pr_elapsed_time?: number;
      /**
       * Format: date-time 
       * @description The time at which the PR effort was started.
       */
      pr_date?: string;
      /** @description Number of efforts by the authenticated athlete on this segment. */
      effort_count?: number;
    };
    PolylineMap: {
      /** @description The identifier of the map */
      id?: string;
      /** @description The polyline of the map, only returned on detailed representation of an object */
      polyline?: string;
      /** @description The summary polyline of the map */
      summary_polyline?: string;
    };
    DetailedSegmentEffort: components["schemas"]["SummarySegmentEffort"] & {
      /** @description The name of the segment on which this effort was performed */
      name?: string;
      activity?: components["schemas"]["MetaActivity"];
      athlete?: components["schemas"]["MetaAthlete"];
      /** @description The effort's moving time */
      moving_time?: number;
      /** @description The start index of this effort in its activity's stream */
      start_index?: number;
      /** @description The end index of this effort in its activity's stream */
      end_index?: number;
      /**
       * Format: float 
       * @description The effort's average cadence
       */
      average_cadence?: number;
      /**
       * Format: float 
       * @description The average wattage of this effort
       */
      average_watts?: number;
      /** @description For riding efforts, whether the wattage was reported by a dedicated recording device */
      device_watts?: boolean;
      /**
       * Format: float 
       * @description The heart heart rate of the athlete during this effort
       */
      average_heartrate?: number;
      /**
       * Format: float 
       * @description The maximum heart rate of the athlete during this effort
       */
      max_heartrate?: number;
      segment?: components["schemas"]["SummarySegment"];
      /** @description The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload */
      kom_rank?: number;
      /** @description The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload */
      pr_rank?: number;
      /** @description Whether this effort should be hidden when viewed within an activity */
      hidden?: boolean;
    };
    MetaActivity: {
      /**
       * Format: int64 
       * @description The unique identifier of the activity
       */
      id?: number;
    };
    ExplorerResponse: {
      /** @description The set of segments matching an explorer request */
      segments?: (components["schemas"]["ExplorerSegment"])[];
    };
    ExplorerSegment: {
      /**
       * Format: int64 
       * @description The unique identifier of this segment
       */
      id?: number;
      /** @description The name of this segment */
      name?: string;
      /** @description The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3. */
      climb_category?: number;
      /**
       * @description The description for the category of the climb 
       * @enum {string}
       */
      climb_category_desc?: "NC" | "4" | "3" | "2" | "1" | "HC";
      /**
       * Format: float 
       * @description The segment's average grade, in percents
       */
      avg_grade?: number;
      start_latlng?: components["schemas"]["LatLng"];
      end_latlng?: components["schemas"]["LatLng"];
      /**
       * Format: float 
       * @description The segments's evelation difference, in meters
       */
      elev_difference?: number;
      /**
       * Format: float 
       * @description The segment's distance, in meters
       */
      distance?: number;
      /** @description The polyline of the segment */
      points?: string;
    };
    DetailedActivity: components["schemas"]["SummaryActivity"] & {
      /** @description The description of the activity */
      description?: string;
      photos?: components["schemas"]["PhotosSummary"];
      gear?: components["schemas"]["SummaryGear"];
      /**
       * Format: float 
       * @description The number of kilocalories consumed during this activity
       */
      calories?: number;
      segment_efforts?: (components["schemas"]["DetailedSegmentEffort"])[];
      /** @description The name of the device used to record the activity */
      device_name?: string;
      /** @description The token used to embed a Strava activity */
      embed_token?: string;
      /** @description The splits of this activity in metric units (for runs) */
      splits_metric?: (components["schemas"]["Split"])[];
      /** @description The splits of this activity in imperial units (for runs) */
      splits_standard?: (components["schemas"]["Split"])[];
      laps?: (components["schemas"]["Lap"])[];
      best_efforts?: (components["schemas"]["DetailedSegmentEffort"])[];
    };
    SummaryActivity: components["schemas"]["MetaActivity"] & {
      /** @description The identifier provided at upload time */
      external_id?: string;
      /**
       * Format: int64 
       * @description The identifier of the upload that resulted in this activity
       */
      upload_id?: number;
      athlete?: components["schemas"]["MetaAthlete"];
      /** @description The name of the activity */
      name?: string;
      /**
       * Format: float 
       * @description The activity's distance, in meters
       */
      distance?: number;
      /** @description The activity's moving time, in seconds */
      moving_time?: number;
      /** @description The activity's elapsed time, in seconds */
      elapsed_time?: number;
      /**
       * Format: float 
       * @description The activity's total elevation gain.
       */
      total_elevation_gain?: number;
      /**
       * Format: float 
       * @description The activity's highest elevation, in meters
       */
      elev_high?: number;
      /**
       * Format: float 
       * @description The activity's lowest elevation, in meters
       */
      elev_low?: number;
      type?: components["schemas"]["ActivityType"];
      sport_type?: components["schemas"]["SportType"];
      /**
       * Format: date-time 
       * @description The time at which the activity was started.
       */
      start_date?: string;
      /**
       * Format: date-time 
       * @description The time at which the activity was started in the local timezone.
       */
      start_date_local?: string;
      /** @description The timezone of the activity */
      timezone?: string;
      start_latlng?: components["schemas"]["LatLng"];
      end_latlng?: components["schemas"]["LatLng"];
      /** @description The number of achievements gained during this activity */
      achievement_count?: number;
      /** @description The number of kudos given for this activity */
      kudos_count?: number;
      /** @description The number of comments for this activity */
      comment_count?: number;
      /** @description The number of athletes for taking part in a group activity */
      athlete_count?: number;
      /** @description The number of Instagram photos for this activity */
      photo_count?: number;
      /** @description The number of Instagram and Strava photos for this activity */
      total_photo_count?: number;
      map?: components["schemas"]["PolylineMap"];
      /** @description Whether this activity was recorded on a training machine */
      trainer?: boolean;
      /** @description Whether this activity is a commute */
      commute?: boolean;
      /** @description Whether this activity was created manually */
      manual?: boolean;
      /** @description Whether this activity is private */
      private?: boolean;
      /** @description Whether this activity is flagged */
      flagged?: boolean;
      /** @description The activity's workout type */
      workout_type?: number;
      /** @description The unique identifier of the upload in string format */
      upload_id_str?: string;
      /**
       * Format: float 
       * @description The activity's average speed, in meters per second
       */
      average_speed?: number;
      /**
       * Format: float 
       * @description The activity's max speed, in meters per second
       */
      max_speed?: number;
      /** @description Whether the logged-in athlete has kudoed this activity */
      has_kudoed?: boolean;
      /** @description Whether the activity is muted */
      hide_from_home?: boolean;
      /** @description The id of the gear for the activity */
      gear_id?: string;
      /**
       * Format: float 
       * @description The total work done in kilojoules during this activity. Rides only
       */
      kilojoules?: number;
      /**
       * Format: float 
       * @description Average power output in watts during this activity. Rides only
       */
      average_watts?: number;
      /** @description Whether the watts are from a power meter, false if estimated */
      device_watts?: boolean;
      /** @description Rides with power meter data only */
      max_watts?: number;
      /** @description Similar to Normalized Power. Rides with power meter data only */
      weighted_average_watts?: number;
    };
    /**
     * @description An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide) 
     * @enum {string}
     */
    SportType: "AlpineSki" | "BackcountrySki" | "Canoeing" | "Crossfit" | "EBikeRide" | "Elliptical" | "EMountainBikeRide" | "Golf" | "GravelRide" | "Handcycle" | "Hike" | "IceSkate" | "InlineSkate" | "Kayaking" | "Kitesurf" | "MountainBikeRide" | "NordicSki" | "Ride" | "RockClimbing" | "RollerSki" | "Rowing" | "Run" | "Sail" | "Skateboard" | "Snowboard" | "Snowshoe" | "Soccer" | "StairStepper" | "StandUpPaddling" | "Surfing" | "Swim" | "TrailRun" | "Velomobile" | "VirtualRide" | "VirtualRun" | "Walk" | "WeightTraining" | "Wheelchair" | "Windsurf" | "Workout" | "Yoga";
    PhotosSummary: {
      /** @description The number of photos */
      count?: number;
      primary?: {
        /** Format: int64 */
        id?: number;
        source?: number;
        unique_id?: string;
        urls?: {
          [key: string]: string | undefined;
        };
      };
    };
    Split: {
      /**
       * Format: float 
       * @description The average speed of this split, in meters per second
       */
      average_speed?: number;
      /**
       * Format: float 
       * @description The distance of this split, in meters
       */
      distance?: number;
      /** @description The elapsed time of this split, in seconds */
      elapsed_time?: number;
      /**
       * Format: float 
       * @description The elevation difference of this split, in meters
       */
      elevation_difference?: number;
      /** @description The pacing zone of this split */
      pace_zone?: number;
      /** @description The moving time of this split, in seconds */
      moving_time?: number;
      /** @description N/A */
      split?: number;
    };
    Lap: {
      /**
       * Format: int64 
       * @description The unique identifier of this lap
       */
      id?: number;
      activity?: components["schemas"]["MetaActivity"];
      athlete?: components["schemas"]["MetaAthlete"];
      /**
       * Format: float 
       * @description The lap's average cadence
       */
      average_cadence?: number;
      /**
       * Format: float 
       * @description The lap's average speed
       */
      average_speed?: number;
      /**
       * Format: float 
       * @description The lap's distance, in meters
       */
      distance?: number;
      /** @description The lap's elapsed time, in seconds */
      elapsed_time?: number;
      /** @description The start index of this effort in its activity's stream */
      start_index?: number;
      /** @description The end index of this effort in its activity's stream */
      end_index?: number;
      /** @description The index of this lap in the activity it belongs to */
      lap_index?: number;
      /**
       * Format: float 
       * @description The maximum speed of this lat, in meters per second
       */
      max_speed?: number;
      /** @description The lap's moving time, in seconds */
      moving_time?: number;
      /** @description The name of the lap */
      name?: string;
      /** @description The athlete's pace zone during this lap */
      pace_zone?: number;
      split?: number;
      /**
       * Format: date-time 
       * @description The time at which the lap was started.
       */
      start_date?: string;
      /**
       * Format: date-time 
       * @description The time at which the lap was started in the local timezone.
       */
      start_date_local?: string;
      /**
       * Format: float 
       * @description The elevation gain of this lap, in meters
       */
      total_elevation_gain?: number;
    };
    UpdatableActivity: {
      /** @description Whether this activity is a commute */
      commute?: boolean;
      /** @description Whether this activity was recorded on a training machine */
      trainer?: boolean;
      /** @description Whether this activity is muted */
      hide_from_home?: boolean;
      /** @description The description of the activity */
      description?: string;
      /** @description The name of the activity */
      name?: string;
      type?: components["schemas"]["ActivityType"];
      sport_type?: components["schemas"]["SportType"];
      /** @description Identifier for the gear associated with the activity. ‘none’ clears gear from activity */
      gear_id?: string;
    };
    ActivityZone: {
      score?: number;
      distribution_buckets?: components["schemas"]["TimedZoneDistribution"];
      /** @enum {string} */
      type?: "heartrate" | "power";
      sensor_based?: boolean;
      points?: number;
      custom_zones?: boolean;
      max?: number;
    };
    /** @description Stores the exclusive ranges representing zones and the time spent in each. */
    TimedZoneDistribution: (components["schemas"]["TimedZoneRange"])[];
    /** @description A union type representing the time spent in a given zone. */
    TimedZoneRange: components["schemas"]["ZoneRange"] & {
      /** @description The number of seconds spent in this zone */
      time?: number;
    };
    Comment: {
      /**
       * Format: int64 
       * @description The unique identifier of this comment
       */
      id?: number;
      /**
       * Format: int64 
       * @description The identifier of the activity this comment is related to
       */
      activity_id?: number;
      /** @description The content of the comment */
      text?: string;
      athlete?: components["schemas"]["SummaryAthlete"];
      /**
       * Format: date-time 
       * @description The time at which this comment was created.
       */
      created_at?: string;
    };
    DetailedClub: components["schemas"]["SummaryClub"] & ({
      /**
       * @description The membership status of the logged-in athlete. 
       * @enum {string}
       */
      membership?: "member" | "pending";
      /** @description Whether the currently logged-in athlete is an administrator of this club. */
      admin?: boolean;
      /** @description Whether the currently logged-in athlete is the owner of this club. */
      owner?: boolean;
      /** @description The number of athletes in the club that the logged-in athlete follows. */
      following_count?: number;
    });
    DetailedGear: components["schemas"]["SummaryGear"] & {
      /** @description The gear's brand name. */
      brand_name?: string;
      /** @description The gear's model name. */
      model_name?: string;
      /** @description The gear's frame type (bike only). */
      frame_type?: number;
      /** @description The gear's description. */
      description?: string;
    };
    Route: {
      athlete?: components["schemas"]["SummaryAthlete"];
      /** @description The description of the route */
      description?: string;
      /**
       * Format: float 
       * @description The route's distance, in meters
       */
      distance?: number;
      /**
       * Format: float 
       * @description The route's elevation gain.
       */
      elevation_gain?: number;
      /**
       * Format: int64 
       * @description The unique identifier of this route
       */
      id?: number;
      /** @description The unique identifier of the route in string format */
      id_str?: string;
      map?: components["schemas"]["PolylineMap"];
      /** @description The name of this route */
      name?: string;
      /** @description Whether this route is private */
      private?: boolean;
      /** @description Whether this route is starred by the logged-in athlete */
      starred?: boolean;
      /** @description An epoch timestamp of when the route was created */
      timestamp?: number;
      /** @description This route's type (1 for ride, 2 for runs) */
      type?: number;
      /** @description This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed) */
      sub_type?: number;
      /**
       * Format: date-time 
       * @description The time at which the route was created
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description The time at which the route was last updated
       */
      updated_at?: string;
      /** @description Estimated time in seconds for the authenticated athlete to complete route */
      estimated_moving_time?: number;
      /** @description The segments traversed by this route */
      segments?: (components["schemas"]["SummarySegment"])[];
    };
    Upload: {
      /**
       * Format: int64 
       * @description The unique identifier of the upload
       */
      id?: number;
      /** @description The unique identifier of the upload in string format */
      id_str?: string;
      /** @description The external identifier of the upload */
      external_id?: string;
      /** @description The error associated with this upload */
      error?: string;
      /** @description The status of this upload */
      status?: string;
      /**
       * Format: int64 
       * @description The identifier of the activity this upload resulted into
       */
      activity_id?: number;
    };
    StreamSet: {
      time?: components["schemas"]["TimeStream"];
      distance?: components["schemas"]["DistanceStream"];
      latlng?: components["schemas"]["LatLngStream"];
      altitude?: components["schemas"]["AltitudeStream"];
      velocity_smooth?: components["schemas"]["SmoothVelocityStream"];
      heartrate?: components["schemas"]["HeartrateStream"];
      cadence?: components["schemas"]["CadenceStream"];
      watts?: components["schemas"]["PowerStream"];
      temp?: components["schemas"]["TemperatureStream"];
      moving?: components["schemas"]["MovingStream"];
      grade_smooth?: components["schemas"]["SmoothGradeStream"];
    };
    TimeStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of time values for this stream, in seconds */
      data?: (number)[];
    };
    BaseStream: {
      /** @description The number of data points in this stream */
      original_size?: number;
      /**
       * @description The level of detail (sampling) in which this stream was returned 
       * @enum {string}
       */
      resolution?: "low" | "medium" | "high";
      /**
       * @description The base series used in the case the stream was downsampled 
       * @enum {string}
       */
      series_type?: "distance" | "time";
    };
    DistanceStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of distance values for this stream, in meters */
      data?: (number)[];
    };
    LatLngStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of lat/long values for this stream */
      data?: (components["schemas"]["LatLng"])[];
    };
    AltitudeStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of altitude values for this stream, in meters */
      data?: (number)[];
    };
    SmoothVelocityStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of velocity values for this stream, in meters per second */
      data?: (number)[];
    };
    HeartrateStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of heart rate values for this stream, in beats per minute */
      data?: (number)[];
    };
    CadenceStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of cadence values for this stream, in rotations per minute */
      data?: (number)[];
    };
    PowerStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of power values for this stream, in watts */
      data?: (number)[];
    };
    TemperatureStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of temperature values for this stream, in celsius degrees */
      data?: (number)[];
    };
    MovingStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of moving values for this stream, as boolean values */
      data?: (boolean)[];
    };
    SmoothGradeStream: components["schemas"]["BaseStream"] & {
      /** @description The sequence of grade values for this stream, as percents of a grade */
      data?: (number)[];
    };
  };
  responses: never;
  parameters: {
    /** @description Page number. Defaults to 1. */
    page: number;
    /** @description Number of items per page. Defaults to 30. */
    perPage: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getStats: {
    /**
     * Get Athlete Stats 
     * @description Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
     */
    parameters: {
        /** @description The identifier of the athlete. Must match the authenticated athlete. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Activity stats of the athlete. */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStats"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getLoggedInAthlete: {
    /**
     * Get Authenticated Athlete 
     * @description Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     */
    responses: {
      /** @description Profile information for the authenticated athlete. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedAthlete"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  updateLoggedInAthlete: {
    /**
     * Update Athlete 
     * @description Update the currently authenticated athlete. Requires profile:write scope.
     */
    parameters: {
        /** @description The weight of the athlete in kilograms. */
      path: {
        weight: number;
      };
    };
    responses: {
      /** @description Profile information for the authenticated athlete. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedAthlete"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getLoggedInAthleteZones: {
    /**
     * Get Zones 
     * @description Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.
     */
    responses: {
      /** @description Heart rate and power zones. */
      200: {
        content: {
          "application/json": components["schemas"]["Zones"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getSegmentById: {
    /**
     * Get Segment 
     * @description Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
     */
    parameters: {
        /** @description The identifier of the segment. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Representation of a segment. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedSegment"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getLoggedInAthleteStarredSegments: {
    /**
     * List Starred Segments 
     * @description List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
     */
    parameters?: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description List of the authenticated athlete's starred segments. */
      200: {
        content: {
          "application/json": (components["schemas"]["SummarySegment"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  starSegment: {
    /**
     * Star Segment 
     * @description Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
     */
    parameters: {
        /** @description The identifier of the segment to star. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * @description If true, star the segment; if false, unstar the segment. 
           * @default false
           */
          starred: boolean;
        };
      };
    };
    responses: {
      /** @description Representation of a segment. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedSegment"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getEffortsBySegmentId: {
    /**
     * List Segment Efforts 
     * @description Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.
     */
    parameters: {
        /** @description The identifier of the segment. */
        /** @description ISO 8601 formatted date time. */
        /** @description ISO 8601 formatted date time. */
        /** @description Number of items per page. Defaults to 30. */
      query: {
        segment_id: number;
        start_date_local?: string;
        end_date_local?: string;
        per_page?: number;
      };
    };
    responses: {
      /** @description List of segment efforts. */
      200: {
        content: {
          "application/json": (components["schemas"]["DetailedSegmentEffort"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  exploreSegments: {
    /**
     * Explore segments 
     * @description Returns the top 10 segments matching a specified query.
     */
    parameters: {
        /** @description The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] */
        /** @description Desired activity type. */
        /** @description The minimum climbing category. */
        /** @description The maximum climbing category. */
      query: {
        bounds: (number)[];
        activity_type?: "running" | "riding";
        min_cat?: number;
        max_cat?: number;
      };
    };
    responses: {
      /** @description List of matching segments. */
      200: {
        content: {
          "application/json": components["schemas"]["ExplorerResponse"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getSegmentEffortById: {
    /**
     * Get Segment Effort 
     * @description Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
     */
    parameters: {
        /** @description The identifier of the segment effort. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Representation of a segment effort. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedSegmentEffort"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  createActivity: {
    /**
     * Create an Activity 
     * @description Creates a manual activity for an athlete, requires activity:write scope.
     */
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @description The name of the activity. */
          name: string;
          /** @description Type of activity. For example - Run, Ride etc. */
          type?: string;
          /** @description Sport type of activity. For example - Run, MountainBikeRide, Ride, etc. */
          sport_type: string;
          /**
           * Format: date-time 
           * @description ISO 8601 formatted date time.
           */
          start_date_local: string;
          /**
           * Format: int32 
           * @description In seconds.
           */
          elapsed_time: number;
          /** @description Description of the activity. */
          description?: string;
          /**
           * Format: float 
           * @description In meters.
           */
          distance?: number;
          /**
           * Format: int32 
           * @description Set to 1 to mark as a trainer activity.
           */
          trainer?: number;
          /**
           * Format: int32 
           * @description Set to 1 to mark as commute.
           */
          commute?: number;
        };
      };
    };
    responses: {
      /** @description The activity's detailed representation. */
      201: {
        content: {
          "application/json": components["schemas"]["DetailedActivity"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getActivityById: {
    /**
     * Get Activity 
     * @description Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    parameters: {
        /** @description To include all segments efforts. */
      query?: {
        include_all_efforts?: boolean;
      };
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The activity's detailed representation. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedActivity"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  updateActivityById: {
    /**
     * Update Activity 
     * @description Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     */
    parameters: {
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["UpdatableActivity"];
      };
    };
    responses: {
      /** @description The activity's detailed representation. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedActivity"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getLoggedInAthleteActivities: {
    /**
     * List Athlete Activities 
     * @description Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     */
    parameters?: {
        /** @description An epoch timestamp to use for filtering activities that have taken place before a certain time. */
        /** @description An epoch timestamp to use for filtering activities that have taken place after a certain time. */
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        before?: number;
        after?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description The authenticated athlete's activities */
      200: {
        content: {
          "application/json": (components["schemas"]["SummaryActivity"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getLapsByActivityId: {
    /**
     * List Activity Laps 
     * @description Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    parameters: {
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Activity Laps. */
      200: {
        content: {
          "application/json": (components["schemas"]["Lap"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getZonesByActivityId: {
    /**
     * Get Activity Zones 
     * @description Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    parameters: {
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Activity Zones. */
      200: {
        content: {
          "application/json": (components["schemas"]["ActivityZone"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getCommentsByActivityId: {
    /**
     * List Activity Comments 
     * @description Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    parameters: {
        /** @description Deprecated. Prefer to use after_cursor. */
        /** @description Deprecated. Prefer to use page_size. */
        /** @description Number of items per page. Defaults to 30. */
        /** @description Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched. */
      query?: {
        page?: number;
        per_page?: number;
        page_size?: number;
        after_cursor?: string;
      };
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Comments. */
      200: {
        content: {
          "application/json": (components["schemas"]["Comment"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getKudoersByActivityId: {
    /**
     * List Activity Kudoers 
     * @description Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     */
    parameters: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Comments. */
      200: {
        content: {
          "application/json": (components["schemas"]["SummaryAthlete"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getClubById: {
    /**
     * Get Club 
     * @description Returns a given club using its identifier.
     */
    parameters: {
        /** @description The identifier of the club. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The detailed representation of a club. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedClub"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getClubMembersById: {
    /**
     * List Club Members 
     * @description Returns a list of the athletes who are members of a given club.
     */
    parameters: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
        /** @description The identifier of the club. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A list of summary athlete representations. */
      200: {
        content: {
          "application/json": (components["schemas"]["SummaryAthlete"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getClubAdminsById: {
    /**
     * List Club Administrators 
     * @description Returns a list of the administrators of a given club.
     */
    parameters: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
        /** @description The identifier of the club. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A list of summary athlete representations. */
      200: {
        content: {
          "application/json": (components["schemas"]["SummaryAthlete"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getClubActivitiesById: {
    /**
     * List Club Activities 
     * @description Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
     */
    parameters: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
        /** @description The identifier of the club. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A list of activities. */
      200: {
        content: {
          "application/json": (components["schemas"]["SummaryActivity"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getLoggedInAthleteClubs: {
    /**
     * List Athlete Clubs 
     * @description Returns a list of the clubs whose membership includes the authenticated athlete.
     */
    parameters?: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description A list of summary club representations. */
      200: {
        content: {
          "application/json": (components["schemas"]["SummaryClub"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getGearById: {
    /**
     * Get Equipment 
     * @description Returns an equipment using its identifier.
     */
    parameters: {
        /** @description The identifier of the gear. */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A representation of the gear. */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedGear"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getRouteById: {
    /**
     * Get Route 
     * @description Returns a route using its identifier. Requires read_all scope for private routes.
     */
    parameters: {
        /** @description The identifier of the route. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A representation of the route. */
      200: {
        content: {
          "application/json": components["schemas"]["Route"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getRoutesByAthleteId: {
    /**
     * List Athlete Routes 
     * @description Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
     */
    parameters?: {
        /** @description Page number. Defaults to 1. */
        /** @description Number of items per page. Defaults to 30. */
      query?: {
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description A representation of the route. */
      200: {
        content: {
          "application/json": (components["schemas"]["Route"])[];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getRouteAsGPX: {
    /**
     * Export Route GPX 
     * @description Returns a GPX file of the route. Requires read_all scope for private routes.
     */
    parameters: {
        /** @description The identifier of the route. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A GPX file with the route. */
      200: {
        content: {
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getRouteAsTCX: {
    /**
     * Export Route TCX 
     * @description Returns a TCX file of the route. Requires read_all scope for private routes.
     */
    parameters: {
        /** @description The identifier of the route. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description A TCX file with the route. */
      200: {
        content: {
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  createUpload: {
    /**
     * Upload Activity 
     * @description Uploads a new data file to create an activity from. Requires activity:write scope.
     */
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary 
           * @description The uploaded file.
           */
          file?: string;
          /** @description The desired name of the resulting activity. */
          name?: string;
          /** @description The desired description of the resulting activity. */
          description?: string;
          /** @description Whether the resulting activity should be marked as having been performed on a trainer. */
          trainer?: string;
          /** @description Whether the resulting activity should be tagged as a commute. */
          commute?: string;
          /**
           * @description The format of the uploaded file. 
           * @enum {string}
           */
          data_type?: "fit" | "fit.gz" | "tcx" | "tcx.gz" | "gpx" | "gpx.gz";
          /** @description The desired external identifier of the resulting activity. */
          external_id?: string;
        };
      };
    };
    responses: {
      /** @description A representation of the created upload. */
      201: {
        content: {
          "application/json": components["schemas"]["Upload"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getUploadById: {
    /**
     * Get Upload 
     * @description Returns an upload for a given identifier. Requires activity:write scope.
     */
    parameters: {
        /** @description The identifier of the upload. */
      path: {
        uploadId: number;
      };
    };
    responses: {
      /** @description Representation of the upload. */
      200: {
        content: {
          "application/json": components["schemas"]["Upload"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getActivityStreams: {
    /**
     * Get Activity Streams 
     * @description Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     */
    parameters: {
        /** @description Desired stream types. */
        /** @description Must be true. */
      query: {
        keys: ("time" | "distance" | "latlng" | "altitude" | "velocity_smooth" | "heartrate" | "cadence" | "watts" | "temp" | "moving" | "grade_smooth")[];
        key_by_type: boolean;
      };
        /** @description The identifier of the activity. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The set of requested streams. */
      200: {
        content: {
          "application/json": components["schemas"]["StreamSet"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getSegmentEffortStreams: {
    /**
     * Get Segment Effort Streams 
     * @description Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     */
    parameters: {
        /** @description The types of streams to return. */
        /** @description Must be true. */
      query: {
        keys: ("time" | "distance" | "latlng" | "altitude" | "velocity_smooth" | "heartrate" | "cadence" | "watts" | "temp" | "moving" | "grade_smooth")[];
        key_by_type: boolean;
      };
        /** @description The identifier of the segment effort. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The set of requested streams. */
      200: {
        content: {
          "application/json": components["schemas"]["StreamSet"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getSegmentStreams: {
    /**
     * Get Segment Streams 
     * @description Returns the given segment's streams. Requires read_all scope for private segments.
     */
    parameters: {
        /** @description The types of streams to return. */
        /** @description Must be true. */
      query: {
        keys: ("distance" | "latlng" | "altitude")[];
        key_by_type: boolean;
      };
        /** @description The identifier of the segment. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The set of requested streams. */
      200: {
        content: {
          "application/json": components["schemas"]["StreamSet"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
  getRouteStreams: {
    /**
     * Get Route Streams 
     * @description Returns the given route's streams. Requires read_all scope for private routes.
     */
    parameters: {
        /** @description The identifier of the route. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The set of requested streams. */
      200: {
        content: {
          "application/json": components["schemas"]["StreamSet"];
        };
      };
      /** @description Unexpected error. */
      default: {
        content: {
          "application/json": components["schemas"]["Fault"];
        };
      };
    };
  };
}
